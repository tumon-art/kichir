generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  uname         String?   @unique
  darkMode      Boolean?
  accounts      Account[]
  following     Follows[] @relation("follower")
  followedBy    Follows[] @relation("following")
  kichirs       Kichir[]  @relation("kichir")
  loves         Love[]
  sessions      Session[]
  Comment       Comment[]
  Reply         Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HashTags {
  id         String       @id @default(cuid())
  tag        String       @unique
  categories Categories[] @relation("CategoriesToHashTags")
}

model Kichir {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  body       String
  authorId   String
  img        String?
  categories Categories[]
  author     User         @relation("kichir", fields: [authorId], references: [id], onDelete: Cascade)
  loves      Love[]
  comments   Comment[]
}

model Categories {
  id       String     @id @default(cuid())
  name     String
  kichirId Int?
  kichir   Kichir?    @relation(fields: [kichirId], references: [id])
  hashTags HashTags[] @relation("CategoriesToHashTags")
}

model Love {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  kichir    Kichir   @relation(fields: [kichirId], references: [id], onDelete: Cascade)
  kichirId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([kichirId, userId])
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  kichir    Kichir   @relation(fields: [kichirId], references: [id])
  kichirId  Int
  replies   Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
}
